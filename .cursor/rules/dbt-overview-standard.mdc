---
description: 
globs: __overview__.md,models/descriptions/*,models/gold/**/*.sql
alwaysApply: false
---
# dbt Overview Standards
When working with dbt projects, ensure comprehensive documentation exists about the project and a base reference to the gold models exists in the `__overview__.md` file for both human and LLM consumption.

## Project __overview__
The file `models/descriptions/__overview__.md` is the entry point to the model description and documentation and must contain a rich description of what the project is.  
The file MUST START AND END WITH DBT JINJA DOCS TAGS `{% docs __overview__ %}` and `{% ENDDOCS %}`

## Quick Links Section Requirements
The `__overview__.md` file MUST contain a "Quick Links to Table Documentation" section that provides direct navigation to all gold model documentation. This section must include a simple list, organized by gold schema, with the models and a hyperlink to the model documentation.

### Required Elements:
**Hyperlinks to Gold Model Documentation** - A comprehensive list of all gold models organized by schema. The schema can be inferred from the model name as the slug before the double underscore. For example, `core__fact_blocks` is a model named `fact_blocks` in the schema `core`.  

### Gold Model Links Structure:
The quicklinks section must be organized by schema and use the relative link to load the page generated by dbt documentation. The relative link structure is `#!/model/dbt_uniqueId` where dbt's `uniqueId` format is `node_type.project_name.model_name`. All of these `node_types` are `model`. `project_name` is the name of the dbt models project established in `dbt_project.yml` by the `name` variable. `model_name` is finally the name of the model as determed by the name of the sql file OR the value of `name` in the model's associated `.yml` file. For example, a uniqueId for Near's `fact_blocks` model would be `model.near_models.core__fact_blocks` making the relative URL `#!/model/model.near_models.core__fact_blocks`.  

```markdown
## **Quick Links to Table Documentation**

**Click on the links below to jump to the documentation for each schema.**

### [Schema Name] Tables (`[DATABASE]`.`[SCHEMA]`.`<table_name>`)

**[Model Type Tables:]**

- model_1
- model_2
```

### Schema Organization Rules:
1. **Group by Schema**: Organize models by their schema (core, defi, nft, price, social, governance, etc.)
2. **Use Exact Schema Names**: Use the exact schema names as they appear in the database (e.g., `NEAR.CORE`, `NEAR.DEFI`, `NEAR.NFT`)
3. **Model Type Subgrouping**: Within each schema, subgroup by model type:
   - **Dimension Tables:** (dim_* models)
   - **Fact Tables:** (fact_* models) 
   - **Easy Views:** (ez_* models)
4. **Link Format**: Use the exact dbt docs link format: `#!/model/model.[project_name].[schema]__[model]`
5. **Model Naming**: Use the exact model name as it appears in the file system (without .sql extension)

### Implementation Guidelines for Coding Agents:
1. **Scan Directory Structure**: Read `models/gold/` directory to identify all schema subdirectories
2. **Extract Model Names**: For each schema directory, list all `.sql` files and remove the `.sql` extension
3. **Determine Schema Mapping**: Map directory names to database schema names:
   - `gold/core/` → `NEAR.CORE`
   - `gold/defi/` → `NEAR.DEFI` 
   - `gold/nft/` → `NEAR.NFT`
   - `gold/price/` → `NEAR.PRICE`
   - `gold/social/` → `NEAR.SOCIAL`
   - `gold/governance/` → `NEAR.GOV`
   - `gold/stats/` → `NEAR.STATS`
   - `gold/atlas/` → `NEAR.ATLAS`
4. **Categorize Models**: Group models by prefix:
   - `dim_*` → Dimension Tables
   - `fact_*` → Fact Tables  
   - `ez_*` → Easy Views
   - `udf_*`, `udtf_*` → Custom Functions
5. **Generate Links**: Create markdown links using the proper format
6. **Maintain Order**: Keep models in alphabetical order within each category

### Validation Requirements:
- Every gold model must have a corresponding link
- Links must use the correct dbt docs format
- Schema names must match the actual database schema
- Model names must match the actual file names (without .sql extension)
- Links must be organized by schema and model type
- All links must be functional and point to valid dbt documentation

## XML Tag Requirements
Every `__overview__.md` file MUST include structured `<llm>` XML tags for easy interpretation by an LLM.
```xml
<llm>
<blockchain>[Protocol Name]</blockchain>
<aliases>[Common Aliases]</aliases>
<ecosystem>[Execution Environment or Layer Type, for example EVM, SVM, IBC, Layer 1, Layer 2]</ecosystem>
<description>[Rich 3-5 sentence description of the blockchain, its consensus mechanism, key features, and developer/user benefits including if the blockchain was built for a specific usecase.]</description>
<external_resources>
    <block_scanner>[Link to the primary block scanner for the blockchain]</block_scanner>
    <developer_documenation>[Link to the primary developer documentation, maintained by the blockchain devs]</developer_documentation>
</external_resources>
</llm>
```
Place these XML tags at the end of the documentation (BUT STILL BEFORE THE JINJA ENDDOCS TAG),

## Automatic __overview__.md Updates
The `__overview__.md` file MUST be automatically updated whenever any gold model is created, modified, or deleted to maintain documentation consistency.


### Trigger Conditions:
The following actions MUST trigger an automatic update to `__overview__.md`:
1. **New Gold Model Created**: When a new `.sql` file is added to any `models/gold/*/` directory
2. **Gold Model Modified**: When any existing `.sql` file in `models/gold/*/` directories is changed
3. **Gold Model Deleted**: When any `.sql` file is removed from `models/gold/*/` directories
4. **Gold Model Renamed**: When any `.sql` file in `models/gold/*/` directories is renamed
5. **Schema Directory Changes**: When new schema directories are added to or removed from `models/gold/`

### Update Process for Coding Agents:
When any of the above trigger conditions occur, the coding agent MUST:

1. **Scan Current Gold Models**: 
   - Read the entire `models/gold/` directory structure
   - Identify all `.sql` files across all schema subdirectories
   - Extract model names (remove `.sql` extension)

2. **Generate Updated Quicklinks Section**:
   - Follow the Implementation Guidelines for Coding Agents (section above)
   - Create a complete new quicklinks section with all current gold models
   - Maintain proper schema organization and model type grouping

3. **Update __overview__.md**:
   - Preserve the XML tag section at the top
   - Replace the entire "Quick Links to Table Documentation" section with the newly generated content
   - Maintain all other existing content in the file
   - Ensure proper markdown formatting and link structure

4. **Validation Check**:
   - Verify all gold models have corresponding links
   - Confirm links use correct dbt docs format
   - Check that schema names and model names are accurate
   - Ensure alphabetical ordering within categories

### Implementation Commands:
When a gold model change is detected, the coding agent should execute these steps:

```bash
# 1. Scan for all gold models
find models/gold/ -name "*.sql" -type f

# 2. Generate updated quicklinks content
# (Follow the Implementation Guidelines for Coding Agents)

# 3. Update __overview__.md file
# (Replace the Quick Links section while preserving other content)
```

### File Preservation Rules:
When updating `__overview__.md`, the coding agent MUST:
- **Preserve XML Tags**: Keep the `<llm>` XML section exactly as is
- **Preserve Introduction**: Maintain the project description and usage instructions
- **Preserve Other Sections**: Keep all sections after the Quick Links (Data Model Overview, Using dbt docs, etc.)
- **Update Only Quick Links**: Replace only the "Quick Links to Table Documentation" section
- **Maintain Formatting**: Preserve markdown formatting and structure

### Error Handling:
If the update process encounters issues:
1. **Backup Original**: Create a backup of the original `__overview__.md` before making changes
2. **Partial Updates**: If full regeneration fails, attempt to add/remove only the specific model that changed
3. **Validation**: After any update, verify the file is still valid markdown and all links are functional
4. **Rollback**: If validation fails, restore from backup and report the issue

### Integration with dbt Workflow:
This automatic update process should integrate with standard dbt workflows:
- **Pre-commit**: Update `__overview__.md` before committing gold model changes
- **Post-run**: Verify `__overview__.md` is current after dbt model runs
- **CI/CD**: Include `__overview__.md` validation in continuous integration checks
